{"version":3,"sources":["components/Layout/Topbar.jsx","components/Layout/Content.jsx","components/Layout/Footer.jsx","components/Layout/Layout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Topbar","props","className","children","Content","Footer","Layout","CustomLink","label","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","Home","About","Topics","url","Topic","topicID","useParams","NoPages","App","activeClassName","component","from","pathname","search","state","name","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAUeA,MARf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,UACVD,EAAME,UAAY,uBCKhBC,MARf,SAAiBH,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,WCKJE,MARf,WACI,OACI,yBAAKH,UAAU,sBACX,uDCkBGI,MAff,SAAgBL,GACZ,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,KACKD,EAAMD,QAEX,kBAAC,EAAD,KACI,gDACCC,EAAMG,SAEX,kBAAC,EAAD,QCkEZ,SAASG,EAAT,GAAwD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,oBAC3BC,EAAQC,YAAc,CACxBC,KAAMJ,EACNK,MAAOJ,IAET,OACE,yBAAKR,UAAWS,EAAQ,SAAW,IAC/BA,GAAS,KACX,kBAAC,IAAD,CAAMF,GAAIA,GAAKD,IASrB,SAASO,IACP,OAAS,mCAGX,SAASC,IACP,OAAO,oCAGT,SAASC,IACP,IAAIN,EAAQC,cACZ,OACE,yBAAKV,UAAU,IACb,yCACA,4BACE,4BACE,kBAACK,EAAD,CAAYE,GAAE,UAAKE,EAAMO,IAAX,UAAwBV,MAAM,UAC5C,kBAACD,EAAD,CAAYE,GAAE,UAAKE,EAAMO,IAAX,UAAwBV,MAAM,YAGhD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAI,UAAKF,EAAME,KAAX,cACT,kBAACM,EAAD,OAEF,kBAAC,IAAD,CAAON,KAAMF,EAAME,MACjB,yDAOV,SAASM,IAAS,IACVC,EAAYC,cAAZD,QAEN,OAAS,oDAA0BA,GAGrC,SAASE,IACP,OAAS,kEAGIC,MAhIf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEvB,OAEI,yBAAKE,UAAU,iCACb,kBAAC,IAAD,CAAMA,UAAU,OAAOO,GAAG,KAA1B,QACA,kBAAC,IAAD,CAASP,UAAU,OAAOsB,gBAAgB,OAAOf,GAAG,SAApD,QACA,kBAAC,IAAD,CAASP,UAAU,OAAOO,GAAG,WAA7B,UACA,kBAAC,IAAD,CAASP,UAAU,OAAOO,GAAG,UAA7B,SACA,kBAAC,IAAD,CAASP,UAAU,OAAOO,GAAG,UAA7B,UAINL,QAEI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACD,KAAK,KAChB,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,WACV,kBAACI,EAAD,OAEF,kBAAC,IAAD,CAAOJ,KAAK,QAAQV,SAAW,SAAAF,GAAK,OAAK,iDACzC,kBAAC,IAAD,CAAOY,KAAK,SAASY,UAAWT,IAChC,kBAAC,IAAD,CAAUU,KAAM,SAAUjB,GAAI,CAC5BkB,SAAU,QACVC,OAAQ,cACRC,MAAO,CAAEC,KAAM,WAEjB,kBAAC,IAAD,CAAOL,UAAWH,SCjCZS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c02fdba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Topbar(props) {\r\n    return (\r\n        <div className=\"topbar\">\r\n            {props.children || \"Hello Create React\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Topbar;","import React from 'react';\r\n\r\nfunction Content(props) {\r\n    return (\r\n        <div className=\"content\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer text-center\">\r\n            <strong>This is Footer!!!</strong> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Topbar from './Topbar';\r\nimport Content from './Content';\r\nimport Footer from './Footer';\r\n\r\n//img\r\n// import lobo from 'assets/image/wolf.png';\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <div className=\"layout\">\r\n            <Topbar>\r\n                {props.Topbar}\r\n            </Topbar>\r\n            <Content>\r\n                <h1>Create React App</h1>\r\n                {props.Content}\r\n            </Content>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport Layout from './components/Layout/Layout';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Layout\r\n        Topbar ={\r\n          (\r\n            <div className=\"d-flex justify-content-center\">\r\n              <Link className=\"link\" to=\"/\">Home</Link>\r\n              <NavLink className=\"link\" activeClassName=\"woof\" to=\"/Lobo\">Lobo</NavLink>\r\n              <NavLink className=\"link\" to=\"/Topics\">Topics</NavLink>\r\n              <NavLink className=\"link\" to=\"/About\" >About</NavLink>\r\n              <NavLink className=\"link\" to=\"/Story\" >Story</NavLink>\r\n            </div>\r\n          )\r\n        }\r\n        Content ={\r\n          (\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/Topics\">\r\n                <Topics />\r\n              </Route>\r\n              <Route path=\"/Lobo\" children={ props => (<div>children Lobo</div>)} />\r\n              <Route path=\"/About\" component={About} />\r\n              <Redirect from={\"/About\"} to={{\r\n                pathname: '/Lobo', \r\n                search: \"?Bark=false\",\r\n                state: { name: 'Lobo'}\r\n              }} />\r\n              <Route component={NoPages} ></Route> \r\n            </Switch>\r\n          )\r\n        }\r\n      />\r\n    </Router>\r\n  )\r\n}\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'home',\r\n    exact: true,\r\n    main: () => <div className=\"\">home</div>\r\n  },\r\n  {\r\n    path: '/About',\r\n    name: 'About',\r\n    component: About,\r\n  },\r\n  {\r\n    path: '/Lobo',\r\n    name: 'Lobo',\r\n    component: Lobo,\r\n  },\r\n  {\r\n    path: '/Topics',\r\n    component: Topics,\r\n    children: [\r\n      {\r\n        path: \":topicID\",\r\n        component: Topic,\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n\r\nfunction CustomLink({ label, to, activeOnlyWhenExact}) {\r\n  let match = useRouteMatch({\r\n    path: to,\r\n    exact: activeOnlyWhenExact\r\n  })\r\n  return (\r\n    <div className={match ? 'active' : ''}>\r\n      { match && \"> \"}\r\n      <Link to={to}>{label}</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Lobo() {\r\n  return ( <p>Lobo</p> )\r\n}\r\n\r\nfunction Home() {\r\n  return ( <p>Home</p> )\r\n}\r\n\r\nfunction About() {\r\n  return <p>About</p>\r\n}\r\n\r\nfunction Topics() {\r\n  let match = useRouteMatch()\r\n  return ( \r\n    <div className=\"\">\r\n      <p>Topic Page</p>\r\n      <ul>\r\n        <li>\r\n          <CustomLink to={`${match.url}/Hello`} label=\"Hello\" />\r\n          <CustomLink to={`${match.url}/World`} label=\"World\" />\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route path={`${match.path}/:topicID`}>\r\n          <Topic />\r\n        </Route>\r\n        <Route path={match.path}>\r\n          <h3>Please select a topic.</h3>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Topic() {\r\n  let { topicID } = useParams()\r\n\r\n  return ( <h3>Current TopicID is : {topicID}</h3> )\r\n}\r\n\r\nfunction NoPages() {\r\n  return ( <div>頁面維修中...</div> )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/scss/All.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from 'serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}